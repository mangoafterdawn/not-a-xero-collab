<Mods LoadCommand = "%xero(function(self)
	-- your code goes here here:
-- a bunch of stuff so that i can tab to them
--[[The following eases are transient eases:

bounce tri bell pop tap spike pulse spike inverse
popElastic[damping_factor][oscillation_speed]
tapElastic[damping_factor][oscillation_speed]
pulseElastic[damping_factor][oscillation_speed]
impulse [damp]

The following eases are not transient:

instant linear
inQuad outQuad inOutQuad
inCubic outCubic inOutCubic
inQuart outQuart inOutQuart
inQuint outQuint inOutQuint
inExpo outExpo inOutExpo
inCirc outCirc inOutCirc
inElastic outElastic inOutElastic
inBack outBack inOutBack
inBounce outBounce inOutBounce
inSine outSine inOutSine]]--

local pi,pie=math.pi,math.pi*100

function rad(deg)
	return math.rad(deg) * 100
end

bam = {
	{27.500,0,1},
	{28.000,1,1},
	{28.250,1,1},
	{28.500,2,1},
	{28.750,2,1},
	{29.000,3,1},
	{29.250,0,1},
	{29.500,3,1},
	{29.750,1,1},
	{30.000,3,1},
	{31.000,0,1},
	{32.000,3,4,length=0.500},
	{32.500,2,1},
	{33.500,1,1},
	{34.500,0,4,length=0.500},
	{35.000,2,1},
	{36.000,1,1},
	{36.250,2,1},
	{36.500,1,1},
	{36.750,2,1},
	{37.000,0,1},
	{38.000,1,1},
	{39.000,0,4,length=0.500},
	{39.500,3,1},
	{40.500,2,1},
	{40.750,1,1},
	{41.000,2,1},
	{41.250,1,1},
	{41.500,0,4},
	{42.000,0,1},
	{43.000,3,1},
	{43.250,1,1},
	{43.500,3,1},
	{43.750,1,1},
	{44.000,2,1},
	{44.500,0,1},
	{45.000,3,1},
	{46.000,0,4,length=0.500},
	{46.500,1,1},
	{47.500,2,1},
	{48.500,3,4,length=0.500},
	{49.000,1,1},
	{50.000,2,1},
	{50.250,0,1},
	{50.500,2,1},
	{50.750,0,1},
	{51.000,3,1},
	{51.500,0,1},
	{52.000,1,1},
	{53.000,0,4,length=0.500},
	{53.500,3,4,length=0.500},
	{54.000,0,1},
	{54.500,1,1},
	{54.750,2,1},
	{55.000,1,1},
	{55.250,2,1},
	{55.500,3,4},
	{56.000,0,1},
	{57.000,3,4,length=0.250},
	{57.250,1,1},
	{57.500,3,1},
	{57.750,1,1},
	{58.000,2,1},
}

ebam = {
	{58,3,4,length=0.500},
	{60.000,3,4,length=0.500},
	{60.500,0,1},
	{61.000,1,1},
	{61.500,0,1},
	{62.000,3,1},
	{62.500,0,4,length=0.500},
	{63.000,3,1},
	{63.500,1,1},
	{64.000,2,2,length=0.250},
	{64.500,0,2,length=0.250},
	{65.000,3,2,length=0.250},
	{65.500,1,1},
	{66.000,3,2,length=0.250},
	{66.500,2,1},
	{67.000,1,4,length=0.500},
	{67.500,0,1},
	{68.000,2,1},
	{68.500,1,2,length=0.250},
	{69.000,2,2,length=0.250},
	{69.500,0,4,length=0.500},
	{70.000,3,2,length=0.250},
	{70.500,1,2,length=0.250},
	{71.000,2,2,length=0.250},
	{71.500,0,2,length=0.250},
	{72.000,1,2,length=0.250},
	{72.500,2,1},
	{73.000,1,2,length=0.250},
	{73.500,0,2,length=0.250},
	{74.000,3,4,length=0.500},
	{74.500,2,1},
	{75.000,1,1},
	{75.500,0,2,length=0.250},
	{76.000,2,1},
	{76.500,1,4,length=0.500},
	{77.000,2,1},
	{77.500,0,1},
	{78.000,3,4,length=0.500},
	{78.500,1,2,length=0.250},
	{79.000,2,2,length=0.250},
	{79.500,0,1},
	{80.000,1,4,length=0.500},
	{80.500,2,1},
	{81.000,1,2,length=0.250},
	{81.500,0,4,length=0.500},
	{82.000,2,1},
}

bass = {
	{84.000,0,1},
	{84.500,3,1},
	{85.000,1,1},
	{86.000,3,1},
	{86.500,2,1},
	{87.500,3,1},
	{88.000,0,1},
	{88.500,3,1},
	{89.500,0,1},
	{89.750,1,1},
	{90.000,0,1},
	{90.250,1,1},
	{90.500,0,1},
	{91.000,3,1},
	{91.500,1,1},
	{92.000,2,1},
	{93.000,0,1},
	{93.500,3,1},
	{94.500,0,1},
	{95.000,1,1},
	{95.500,0,1},
	{96.500,3,1},
	{96.750,1,1},
	{97.250,3,1},
	{97.500,1,1},
	{98.000,3,1},
	{98.500,0,1},
	{99.000,1,1},
	{100.000,2,1},
	{100.500,3,1},
	{101.500,0,1},
	{102.000,1,1},
	{102.500,0,1},
	{103.500,3,1},
	{103.750,1,1},
	{104.000,3,1},
	{104.250,1,1},
	{104.500,3,1},
	{105.000,0,1},
	{105.500,1,1},
	{106.000,2,1},
	{107.000,3,1},
	{107.500,0,1},
	{108.500,2,1},
	{109.000,1,1},
	{109.500,2,1},
	{110.000,0,4,length=1.000},
	{111.500,3,1},
	{112.000,0,1},
	{112.500,1,1},
	{113.000,0,1},
	{114.000,3,1},
	{114.500,1,1},
	{115.000,3,1},
	{115.250,0,1},
	{115.500,3,1},
	{116.000,0,1},
	{116.500,2,1},
	{117.500,1,1},
	{117.750,2,1},
	{118.000,1,1},
	{118.250,2,1},
	{118.500,1,1},
	{119.000,3,1},
	{119.500,0,1},
	{120.000,3,1},
	{121.000,0,1},
	{121.500,1,1},
	{122.500,2,1},
	{123.000,3,1},
	{123.500,2,1},
	{124.500,3,1},
	{124.750,1,1},
	{125.250,3,1},
	{125.500,1,1},
	{126.000,3,1},
	{126.500,0,1},
	{127.000,3,1},
	{128.000,0,1},
	{128.500,1,1},
	{129.000,0,1},
	{129.500,1,1},
	{130.000,2,1},
	{130.500,3,1},
	{131.500,0,1},
	{131.750,2,1},
	{132.250,0,1},
	{132.500,2,1},
	{133.000,1,1},
	{133.500,3,1},
	{134.000,1,1},
	{135.000,3,1},
	{135.500,0,1},
	{136.000,3,1},
	{136.250,2,1},
	{136.500,3,1},
	{137.000,0,1},
	{137.500,3,1},
	{138.000,1,1},
	{138.250,2,1},
	{138.500,1,2,length=1.500},
	{140.000,2,1},
	{140.500,0,1},
	{141.000,2,1},
	{142.000,0,1},
	{142.500,3,1},
	{143.000,0,1},
	{143.250,3,1},
	{143.500,0,1},
	{144.000,1,1},
	{144.500,0,1},
	{145.500,3,1},
	{145.750,1,1},
	{146.000,3,1},
	{146.500,0,1},
	{146.750,2,1},
	{147.000,0,1},
	{147.500,3,1},
	{148.000,2,1},
	{149.000,1,1},
	{149.500,0,1},
	{150.000,3,1},
	{150.250,0,1},
	{150.500,3,1},
	{151.000,1,1},
	{151.500,2,1},
	{152.500,3,1},
	{152.750,0,1},
	{153.250,0,1},
	{153.500,3,1},
	{154.000,2,1},
	{154.500,1,1},
	{155.000,0,1},
	{156.000,3,1},
	{156.500,1,1},
	{157.000,2,1},
	{157.250,0,1},
	{157.500,2,1},
	{158.000,0,1},
	{158.500,3,1},
	{159.500,2,1},
	{159.750,1,1},
	{160.000,2,1},
	{160.250,1,1},
	{160.500,2,1},
	{161.000,3,1},
	{161.500,0,1},
	{162.000,3,1},
	{163.000,1,1},
	{163.500,2,1},
	{164.000,0,1},
	{164.250,2,1},
	{164.500,0,1},
	{165.000,3,1},
	{165.500,2,1},
	{166.000,1,2,length=2.000},
	{168.000,0,1},
	{168.500,1,1},
	{169.000,0,1},
	{170.000,3,1},
	{170.500,1,1},
	{171.500,2,1},
	{171.750,0,1},
	{172.000,2,1},
	{172.500,0,1},
	{173.500,3,1},
	{173.750,2,1},
	{174.000,3,1},
	{174.250,2,1},
	{174.500,3,1},
	{175.000,0,1},
	{175.500,1,1},
	{176.000,0,1},
	{177.000,3,1},
	{177.500,1,1},
	{178.000,2,1},
	{178.250,0,1},
	{178.500,2,1},
	{179.000,0,1},
	{179.500,3,1},
	{180.500,2,1},
	{180.750,1,1},
	{181.250,2,1},
	{181.500,1,1},
	{182.000,0,1},
	{182.500,3,1},
	{183.000,0,1},
	{184.000,2,1},
	{184.500,0,1},
	{185.000,3,1},
	{185.250,0,1},
	{185.500,3,1},
	{186.000,0,1},
	{186.500,1,1},
	{187.500,2,1},
	{187.750,3,1},
	{188.250,2,1},
	{188.500,3,1},
	{189.000,0,1},
	{189.500,3,1},
	{190.000,0,1},
	{191.000,2,1},
	{191.500,0,1},
	{192.500,2,1},
	{192.750,1,1},
	{193.000,2,1},
	{193.500,1,1},
	{194.000,3,1},
}

longholds = {
	{109.000,1,2,1.000},
	{110.000,3,2,0.979},
	{111.000,0,1},
	{111.250,1,1},
	{111.500,0,1},
	{111.750,3,1},
	{112.000,1,2,2.000},
	{114.000,2,2,0.750},
	{114.750,1,2,0.750},
	{115.500,3,2,1.000},
	{116.500,2,2,1.000},
	{117.500,1,2,1.000},
	{118.500,0,2,1.000},
	{119.500,1,2,1.000},
	{120.500,0,2,1.500},
	{122.000,3,2,0.500},
	{122.500,0,2,0.750},
	{123.250,2,2,0.750},
	{124.000,1,2,0.750},
	{124.750,3,2,0.750},
	{125.500,0,1},
	{125.750,1,1},
	{126.000,2,2,0.750},
	{126.750,1,2,1.000},
	{127.750,2,2,0.750},
	{128.500,3,1},
	{128.750,1,1},
	{129.000,2,1},
	{129.250,0,2,0.750},
	{130.000,3,2,2.000},
	{132.000,2,2,1.500},
	{133.500,1,2,2.000},
	{135.500,2,2,1.500},
	{137.000,1,2,1.000},
	{138.000,0,2,2.000},
	{140.000,3,2,4.000},
	{144.000,1,2,1.000},
	{145.000,2,2,1.000},
	{146.000,0,2,1.000},
	{147.000,3,2,1.500},
	{148.500,1,2,2.500},
	{151.000,3,2,0.500},
	{151.500,2,4,2.500},
	{154.000,3,1},
	{154.250,0,2,0.500},
	{154.750,2,2,0.750},
	{155.500,0,2,1.000},
	{156.500,1,2,0.500},
	{157.000,2,2,0.500},
	{157.500,1,2,0.750},
	{158.250,2,2,0.750},
	{159.000,3,2,0.500},
	{159.500,1,2,1.000},
	{160.500,2,2,1.500},
	{162.000,1,2,1.500},
	{163.500,3,2,1.000},
	{164.500,0,2,1.000},
	{165.500,1,2,1.500},
	{167.000,2,2,1.000},
	{168.000,3,2,2.000},
	{170.000,0,2,0.750},
	{170.750,2,2,0.750},
	{171.500,1,2,1.000},
	{172.500,3,2,0.500},
	{173.000,2,2,0.500},
	{173.500,1,2,0.500},
	{174.000,2,2,0.500},
	{174.500,3,2,0.500},
	{175.000,0,2,1.000},
	{176.000,2,2,1.000},
	{177.000,1,2,0.500},
	{177.500,3,2,1.250},
	{178.500,2,2,1.000},
	{179.500,1,2,0.500},
	{180.000,0,2,0.750},
	{180.500,3,2,1.500},
	{182.000,2,2,0.750},
	{182.750,1,2,0.750},
	{183.500,2,2,1.000},
	{184.500,1,2,0.500},
	{185.000,0,2,0.500},
	{185.500,3,2,0.750},
	{186.250,1,2,0.750},
	{187.000,2,2,1.000},
	{188.000,1,2,0.500},
	{188.500,3,2,1.500},
	{190.000,0,1},
	{190.250,3,1},
	{190.750,0,1},
	{191.000,3,1},
	{191.500,1,1},
	{191.750,3,1},
	{192.500,2,2,3.500},
}

longholds2 = {
	{359.000,3,2,0.500},
	{359.500,1,2,0.500},
	{360.000,2,2,0.500},
	{360.500,0,2,2.250},
	{362.750,1,1},
	{363.000,2,1},
	{363.250,1,1},
	{363.500,2,2,1.000},
	{364.500,3,2,1.000},
	{365.500,1,2,0.500},
	{366.000,2,2,0.250},
	{366.250,0,2,0.500},
	{366.750,3,2,0.750},
	{367.500,2,2,1.500},
	{369.000,1,2,1.000},
	{370.000,2,2,1.000},
	{371.000,3,2,1.500},
	{372.500,1,2,0.500},
	{373.000,2,2,1.667},
	{374.667,0,2,0.667},
	{375.333,2,2,0.667},
	{376.000,1,2,1.667},
	{377.667,2,2,0.667},
	{378.333,1,2,0.667},
	{379.000,3,2,1.500},
	{380.500,2,2,0.500},
	{381.000,1,2,1.000},
	{382.000,2,2,0.750},
	{382.750,3,2,0.750},
	{383.500,0,1},
	{385.000,3,2,2.000},
	{387.000,0,2,1.500},
	{388.500,2,2,1.500},
	{390.000,0,2,0.750},
	{390.750,2,2,0.250},
	{391.000,1,2,0.500},
	{391.500,3,2,0.500},
	{392.000,0,2,1.500},
	{393.500,1,2,0.500},
	{394.000,2,2,1.500},
	{395.500,3,2,1.500},
	{397.000,0,2,0.750},
	{397.750,2,2,0.750},
	{398.500,0,2,0.500},
	{399.000,1,2,2.000},
	{401.000,0,2,0.250},
	{401.250,3,2,0.750},
	{402.000,1,2,1.500},
	{403.500,2,2,0.500},
	{404.000,0,2,0.500},
	{404.500,3,2,0.500},
	{405.000,1,2,0.750},
	{405.750,2,2,0.750},
	{406.500,0,2,0.750},
	{407.250,1,2,0.750},
	{408.000,2,2,1.500},
	{409.500,3,1},
	{410.750,0,2,0.750},
	{411.500,2,2,1.500},
	{413.000,0,2,1.500},
	{414.500,3,2,0.500},
	{415.000,2,2,0.500},
	{415.500,1,2,0.500},
	{416.000,0,2,0.500},
	{416.500,3,2,2.000},
	{418.500,1,2,1.500},
	{420.000,3,2,1.500},
	{421.500,2,2,0.750},
	{422.250,3,2,0.750},
	{423.000,0,2,1.000},
	{424.000,2,2,1.500},
	{425.500,1,2,1.000},
	{426.500,3,2,1.500},
	{428.000,1,2,0.500},
	{428.500,2,2,0.500},
	{429.000,0,2,0.500},
	{429.500,1,2,0.750},
	{430.250,2,2,0.750},
	{431.000,3,2,0.750},
}

extratone = {
	{308.000,0,1},
	{308.500,0,1},
	{309.000,0,1},
	{309.500,0,1},
	{310.000,0,1},
	{310.500,0,1},
	{311.000,0,1},
	{311.250,0,1},
	{311.500,0,1},
	{312.000,0,1},
	{312.500,0,1},
	{313.000,0,1},
	{313.500,0,1},
	{314.000,0,1},
	{314.250,0,1},
	{314.500,0,1},
	{314.750,0,1},
	{315.000,0,1},
	{315.500,0,1},
	{316.000,0,1},
	{316.500,0,1},
	{317.000,0,1},
	{317.250,0,1},
	{317.500,0,1},
	{317.750,0,1},
	{318.000,0,1},
	{318.250,0,1},
	{318.500,0,1},
	{319.000,0,1},
	{319.500,0,1},
	{320.000,0,1},
	{320.250,0,1},
	{320.500,0,1},
	{320.750,0,1},
	{321.000,0,1},
	{321.250,0,1},
	{321.500,0,1},
	{321.750,0,1},
	{322.000,0,1},
	{322.250,0,1},
	{322.500,0,1},
	{322.750,0,1},
	{323.000,0,1},
	{323.250,0,1},
	{323.500,0,1},
	{323.750,0,1},
	{324.000,0,1},
	{324.250,0,1},
	{324.500,0,1},
	{324.750,0,1},
	{325.000,0,1},
	{325.125,0,1},
	{325.250,0,1},
	{325.375,0,1},
	{325.500,0,1},
	{325.750,0,1},
	{326.000,0,1},
	{326.250,0,1},
	{326.500,0,1},
	{326.750,0,1},
	{327.000,0,1},
	{327.250,0,1},
	{327.500,0,1},
	{327.750,0,1},
	{328.000,0,1},
	{328.125,0,1},
	{328.250,0,1},
	{328.500,0,1},
	{328.625,0,1},
	{328.750,0,1},
	{328.875,0,1},
	{329.000,0,1},
	{329.125,0,1},
	{329.250,0,1},
	{329.375,0,1},
	{329.500,0,1},
	{329.750,0,1},
	{330.000,0,1},
	{330.250,0,1},
	{330.500,0,1},
	{330.750,0,1},
	{331.000,0,1},
	{331.125,0,1},
	{331.250,0,1},
	{331.375,0,1},
	{331.500,0,1},
	{331.667,0,1},
	{331.833,0,1},
	{332.000,0,1},
	{332.083,0,1},
	{332.167,0,1},
	{332.250,0,1},
	{332.333,0,1},
	{332.417,0,1},
	{332.500,0,1},
	{332.563,0,1},
	{332.625,0,1},
	{332.688,0,1},
	{332.750,0,1},
	{332.813,0,1},
	{332.875,0,1},
	{332.938,0,1},
	{333.000,0,1},
	{333.063,0,1},
	{333.125,0,1},
	{333.188,0,1},
	{333.250,0,1},
	{333.313,0,1},
	{333.375,0,1},
	{333.438,0,1},
	{333.500,0,1},
	{333.563,0,1},
	{333.625,0,1},
	{333.688,0,1},
	{333.750,0,1},
	{333.813,0,1},
	{333.875,0,1},
	{333.938,0,1},
	{334.000,0,1},
	{334.063,0,1},
	{334.125,0,1},
	{334.188,0,1},
	{334.250,0,1},
	{334.313,0,1},
	{334.375,0,1},
	{334.438,0,1},
	{334.500,0,1},
	{334.563,0,1},
	{334.625,0,1},
	{334.688,0,1},
	{334.750,0,1},
	{334.813,0,1},
	{334.875,0,1},
	{334.938,0,1},
	{335.000,0,1},
}


GAMESTATE:ForceSmoothLines(0)
--local inv=2*(i%2)-1
--local switch=(i+1)%2
setdefault{
	0,'bumpyxoffset',
	1000,'bumpyzoffset',
plr=1}
setdefault{
	1000,'bumpyxoffset',
	0,'bumpyzoffset',
plr=2}
setdefault{
	80,'blendalpha',
	1500,'wireframegirth',
	0.1,'rrotz',
	0.5,'rskewy',
	0.5,'rskewx',
	100,'rzoom',
	100,'rzoomx',
	100,'rzoomy',
	1000,'bumpyxperiod',
	1000,'bumpyzperiod',
}
definemod{'blendalpha',function(amt)
	aftsprite1:diffusealpha(amt/100)
end}
definemod{'opacitycb',function(opct)
	exclusionshaderholder:GetShader():uniform1f('opacity',opct)
	if opct ~= 0 then
		blendsprite:SetShader(exclusionshaderholder:GetShader())
	end
end}
definemod{'opacitycd',function(opct)
	dodgeshaderholder:GetShader():uniform1f('opacity',opct)
	if opct ~= 0 then
		blendsprite:SetShader(dodgeshaderholder:GetShader())
	end
end}
definemod{'opacitydf',function(opct)
	diffshaderholder:GetShader():uniform1f('opacity',opct)
	if opct ~= 0 then
		blendsprite:SetShader(diffshaderholder:GetShader())
	end
end}
definemod{'rzoomx','rzoomy',function(rzmx,rzmy)
	aftsprite1:zoomx(rzmx/100)
	aftsprite1:zoomy(rzmy/100)
end}
definemod{'rskewx','rskewy','rrotx','rroty','rrotz','rzoom','rposx','rposy',function(rsx,rsy,rx,ry,rz,rzm,rpx,rpy)
	aftsprite1:skewx(rsx/100)
	aftsprite1:skewy(rsy/100)
	aftsprite1:rotationx(rx)
	aftsprite1:rotationy(ry)
	aftsprite1:rotationz(rz)
	aftsprite1:zoom(rzm/100)
	aftsprite1:x(scx+rpx)
	aftsprite1:y(scy+rpy)
end}
func{27,function()
	aftsprite1:hidden(0)
end}

for i,v in ipairs(bam) do
	local inv=2*(i%2)-1
	if v[3]==4 then 
		for k=0,3 do
			ease{v[1]+k*0.1666,0.5,flip(outExpo),
				-100,'tiny',
				0,'rskewx',
				-50*inv,'rskewy',
				2,'rrotz',
			}
			if k==3 then
				add{v[1]+k*0.1666,1,impulse[2],
					100,'blendalpha',
					0.2,'opacitycb',
				}
				ease{v[1]+k*0.1666,2,flip(outExpo),
					-200,'tiny',
					100,'zigzag',
				}
			end
			set{v[1],
				100*inv,'sawtooth',
				900*inv,'bumpyz',
				4000,'longholds',
				-100,'tiny'..v[2],
			}
			ease{v[1],0.5,inExpo,
				0,'sawtooth',
				0,'gayholds',
				0,'longholds',
				0,'bumpyz',
				0,'tiny'..v[2],
			}
		end
	else
		add{v[1],0.25,pop,
			90,'blendalpha',
			0.8,'opacitycb',
		}
		ease{v[1],1,flip(outExpo),
			-200,'tiny',
			300,'arrowpathgirth',
		}
		ease{v[1]-0.5,1,inverse,
			20*inv,'alternate',
			100,'invert',
			100,'square',
			100,'sawtooth',
		}
		ease{v[1],1,impulse[0.5],
			-900,'tinyz',
			25,'arrowpath',
		}
	end
end
ease{27,84-27,inOutQuad,
	100,'blendalpha',
	1,'opacitycb',
}
--xero's feature request

swap{46,0.5,outExpo,'ludr'}
swap{49,0.5,outExpo,'ldur'}

--58 to 84
for i=0,12 do
	local switch=(i+1)%2
	local inv=2*(i%2)-1
	add{58+i*2,2,inOutSine,
		0*inv,'rskewy',
		5*(i^2/26)*inv,'rskewx',
		4*inv,'rrotx',
	}
	add{58+i*2+1,2,inOutSine,
		5*(i^2/26)*inv,'rskewy',
		0*inv,'rskewx',
		-16*inv,'rrotx',
	}

	add{58+i*2,2,pop,
		500*inv,'arrowpathgirth',
	plr=1}
	add{58+i*2,2,inOutSine,
		10*inv,'bumpyx',
		-10*inv,'bumpyz',
	plr=1}
	
	add{58+i*2+1,2,pop,
		500*inv,'arrowpathgirth',
	plr=2}
	add{58+i*2,2,inOutSine,
		-10*inv,'bumpyx',
		10*inv,'bumpyz',
	plr=2}
end
ease{58,26,inOutSine,
	-120,'bumpyx',
	120,'bumpyz',

	120,'bumpyzperiod',
	120,'bumpyxperiod',

	50,'arrowpath',
plr=1}
ease{58,26,inOutSine,
	120,'bumpyx',
	-120,'bumpyz',

	120,'bumpyzperiod',
	120,'bumpyxperiod',

	50,'arrowpath',
plr=2}
ease{82,2,inOutQuad,
	0,'bumpyx',
	0,'bumpyz',
	120,'drawsize',
	0,'arrowpath',
	120,'arrowpathdrawsize',
	80,'drawsizeback',
	80,'arrowpathdrawsizeback',
}

ease{84,2,inOutSine,
	get('rskewx')/8,'rskewx',
	get('rskewy')/8,'rskewy'
}
for i,v in ipairs(ebam) do
	local inv=2*(i%2)-1
	if v[3]==4 then
		for k=0,3 do
			ease{v[1]+k*0.1666,0.5,flip(outExpo),
				-100,'tiny',
				0,'rskewx',
				-20*inv,'rskewy',
				2,'rrotz',
				50,'invert',
				20*inv,'alternate',
			}

			set{v[1],
				100*inv,'square',
				900*inv,'bumpyz',
				4000,'longholds',
				-100,'tiny'..v[2],
			}
			ease{v[1],0.5,inExpo,
				0,'square',
				0,'gayholds',
				0,'longholds',
				0,'bumpyz',
				0,'tiny'..v[2],
			}
		end
	elseif v[3]==2 then
		ease{v[1],0.25,flip(inExpo),
			100,'invert',
		}
		ease{v[1],1,flip(outExpo),
			-100,'tiny',
			-20*inv,'alternate',
		}
		for k=0,3 do
			ease{v[1]+k*0.166/2,0.166/2,flip(outExpo),
				50,'stealth',
				300*inv,'noteskewx',
			plr=2}
		end
		swap{v[1],0.166/2,outExpo,'ldur',plr=2}
		swap{v[1]+0.166/2,0.166/2,outExpo,'rldu',plr=2}
		swap{v[1]+(0.166/2*2),0.166/2,outExpo,'urld',plr=2}
		swap{v[1]+(0.166/2*3),0.166/2,outExpo,'ldur',plr=2}
	end
end

extratone2 = {
	{166.000,2,1},
	{166.250,2,1},
	{166.500,2,1},
	{166.625,2,1},
	{166.750,2,1},
	{166.875,2,1},
	{167.000,2,1},
	{167.083,2,1},
	{167.167,2,1},
	{167.250,2,1},
	{167.333,2,1},
	{167.417,2,1},
	{167.500,2,1},
}
for r=0,1 do
	for i,v in ipairs(extratone2) do
		local inv=2*(i%2)-1
		add{v[1]+r*28,1,flip(outExpo),
			100*inv,'sawtooth',
			40*inv,'tandigitalz',
			40*inv,'skewx',
		plr=2}
		add{v[1]+r*28,1,flip(outExpo),
			-200*inv,'tiny',
		}
	end
end
for i,v in ipairs(longholds) do
	local inv=2*(i%2)-1
	local length=v[4]
	if length==nil then length=1 end
	set{v[1],1000,'bumpyzperiod',1000,'bumpyxperiod',500,'bumpyxoffset'}
	add{v[1],v[3],inOutQuad,
		400,'bumpyzoffset',
		400,'bumpyxoffset',
	}
	ease{v[1],v[3],inOutQuad,
		100*inv,'bumpyz',
		-100*inv,'bumpyx',
	}
end

for i,v in ipairs(bass) do
	local pn=(i+1)%2+1
	local switch=(i+1)%2
	local switch2=(i)%2
	local inv=2*(i%2)-1
	ease{v[1],0.5,flip(outExpo),
		0.75,'mask'
	}
	ease{v[1]-0.1,0.5,flip(outExpo),
		-200,'tiny',
		0,'flip',
	}
	if i%2==0 then 
		ease{v[1]+0.25,1,outQuad,
			0,'tinyz',
			50,'roll',
			50,'twirl',
			100,'wireframe',
		plr=1}
		set{v[1]+0.25,
			0,'tinyz',
			0,'roll',
			0,'twirl',
			0,'wireframe',
		plr=2}
	else
		ease{v[1]+0.25,1,outQuad,
			0,'tinyz',
			50,'roll',
			50,'twirl',
			100,'wireframe',
		plr=2}
		set{v[1]+0.25,
			0,'tinyz',
			0,'roll',
			0,'twirl',
			0,'wireframe',
		plr=1}
	end


	ease{v[1],1,impulse[2],
		10*inv,'noteskewy',
		-10*inv,'skewy',
		-10*inv,'alternate',
		8*inv,'split',
	}
	ease{v[1]-0.25,0.5,inverse,
		-500,'tiny'..v[2],
		-50,'reverse'..v[2],
		-100,'tornado',
	}
	ease{v[1],0.5,pop,
		10*inv,'rposx',
	}
	add{v[1],0.5,flip(outExpo),
		-30,'rskewx',
		30,'rskewy',
	}
	ease{v[1]-0.1,1.75,popElastic[2][4],
		100,'arrowpath',
	plr=1}
	ease{v[1]-0.1,1.75,popElastic[2][4],
		-100,'tinyx',
		500,'arrowpathgirth',
	}
	ease{v[1]-0.1,0.5,flip(outExpo),
		100*inv,'tanbumpy',
		5*inv,'rotationz',
		-40*inv,'noteskewx',
		-100,'tinyy',
	}
	if v[1]>=140 then 
		ease{v[1],1,flip(outExpo),
			100*switch,'flip',
		}
	else

	end

end
for i=0,12 do
	ease{84+i*8,4,inOutSine,
		45/4,'rotationz',
	}
	ease{84+i*8+4,4,inOutSine,
		-45/4,'rotationz',
	}
	if i%3==0 then
		ease{84+i*8,12,inOutSine,
			45/1.5,'rotationx',
			-rad(45/1.5),'confusionxoffset',
			-45/1.2,'rotationy',
		}
	else
		ease{84+i*8+6,12,inOutSine,
			-45/1.5,'rotationx',
			rad(45/1.5),'confusionxoffset',
			45/1.2,'rotationy',
		}
	end
end

set{138,100,'tiny'}
ease{138.5,1.25,inBack,
	0,'tiny',
}
ease{138.5,1.25,inExpo,
	--100,'flip',
}
ease{138.5,2,inOutCirc,
	0,'rskewx',
	5,'rposy',
	25/2,'rroty',
}

ease{84-0.5,1,inOutCirc,
	0,'opacitycb',
	1,'opacitycd',
}
func{138.5,function()
	plus:diffusealpha(0)
end}
func{140,1,inQuad,function()
	plus:diffusealpha(0.25)
	plus:rotationx(20)
	plus:rotationy(-50)
end}
definemod{'plusrx','plusry','plusrz',function(rx,ry,rz)
	plus:rotationx(rx)
	plus:rotationy(ry)
	plus:rotationz(rz)
end}
add{140,196-140,inQuad,
	360*5,'plusrz',
}

func{84,function()
	plus:hidden(1)
	exclusionshaderholder:GetShader():uniformTexture('sampler1', overlay2:GetTexture())
	aquad:diffuse(0.0,0.0,0.0,1)
end}

reset{194.5,1.5,inExpo}

mincr0=0
mincr1=0
mincr2=0
set{336,
	400,'attenuatex',
	100,'zoom',
	6000,'arrowpathdrawsize',
	6000,'arrowpathdrawsizeback',
	0,'rrotz',
	106,'rzoom',
	0.82,'opacitydf',
	100,'blendalpha',
	75,'drawsize',
	75,'drawsizeback',
	sh,'stripeszoomy',
	25,'stripespeed'
}
set{336,
	150,'zoom',
	50,'arrowpath',
	100,'stealth',
	100,'dark',
	100,'flip',
	-200,'z',
plr=2}
func{336,function()
	stripes:hidden(0)
	stripes:customtexturerect(0,0,24,24)
	stripes:rotationz(90)
	stripes2:hidden(0)
	stripes2:customtexturerect(0,0,24,24)
	stripes2:rotationz(90)
	overlay:hidden(0)
	overlay:blend('add')
	overlay:diffusealpha(0.1)
	overlay:zoomto(sw,sw)
	overlay:xy(scx,scy)
	overlay4:hidden(0)
	overlay4:blend('subtract')
	overlay4:diffusealpha(0)
	overlay4:zoomto(sw*1.5,sw*1.5)
	overlay4:xy(scx,scy)
	blendsprite:SetTextureFiltering(true)
	aquad:diffuse(0,0,0,1)
end}
definemod{'stripeszoomy',function(y)
	stripes:zoomy(y/100)
	stripes2:zoomy(y/100)
end}
definemod{'stripespeed',function(x)
	stripes:texcoordvelocity(x,0)
	stripes2:texcoordvelocity(x,0)
end}
definemod{'overlayrz',function(z)
	overlay4:rotationz(z)
end}
for i=0,128+64 do 
	if (i<=93 or i>=98) then
		local switch=(i+1)%2
		local inv=2*(i%2)-1
		add{336+i*0.5,2,flip(outSine),
			-25,'stealth',
			-100,'flip',
			40*inv,'skewy',
			10,'rroty',
			10,'rrotx',
			-5,'rskewy',
			-5,'rskewx',
		plr=2}

		ease{336+i*0.5-0.25,0.25,inCirc,
			100*switch,'invert',
		plr=1}

		add{336+i*0.5,0.75,flip(outSine),
			pie/2*inv,'confusionoffset',
			5000,'arrowpathgirth',
		plr=2}
		ease{336+i*0.5,0.5,outExpo,
			--0.5*switch,'opacitydf',
			100*inv,'square',
		plr=2}
		add{336+i*0.5,1,outExpo,
			-90/8,'overlayrz',
			100,'squareoffset',
		}
		ease{336+i*0.5,0.5,flip(inCirc),
			50,'zoomx',
		plr=2}
		ease{336+i*0.5,1,popElastic[2][3],
			-300,'tinyx',
		}
		ease{336+i*0.5,1.5,popElastic[2][4],
			-300,'tinyy',
		}
		ease{336+i*0.5,0.4,flip(inExpo),
			0,'stripespeed',
		}
		ease{336+i*0.5,0.5,flip(inCirc),
			10*inv,'alternate',
		}
		if i%4==0 then
		elseif i%4==1 then
		mincr2=mincr2+1
		local inv=2*(mincr2%2)-1
		
		ease{336+i*4,16,inOutSine,
			45*inv,'rotationz',
		}
		ease{336+i*4+4,16,inOutSine,
			-45*inv,'rotationz',
		}
		elseif i%4==2 then
		mincr1=mincr1+1
		local inv=2*(mincr1%2)-1
		ease{336+i*4,8,inOutSine,
			50*inv,'rotationx',
			-rad(50*inv),'confusionxoffset',
		}
		ease{336+i*4+4,8,inOutSine,
			-50*inv,'rotationx',
			rad(50*inv),'confusionxoffset',
		}
		end
	end
end
set{308,
	--100,'arrowpath',
	--200,'digital',
	--200,'digitalz',
	-20,'digitalzperiod',
	-20,'digitalperiod',
	0,'digitalzoffset',
	1000,'digitaloffset',
	--50,'arrowpathgrain',
}
ease{308,30,inCirc,
	95,'blendalpha',
}
add{308,30,inCirc,
	10000,'digitaloffset',
	10000,'digitalzoffset',
}
for i=1,#extratone-1 do
	local inv=2*(i%2)-1
	local col=i%4
	local v1=extratone[i]
	local v2=extratone[i+1]
	local length=v2[1]-v1[1]
	add{v1[1],length,flip(outQuad),
		-300,'tiny',
		-200,'tiny'..col,
	}
	add{v1[1],length*2,flip(outExpo),
		-15*(i/#extratone)*inv,'rotationz',
		rad(15*inv),'confusionoffset',
		-30*inv,'noteskewy'..col,
		-10*inv,'noteskewy'..col+1,
		-30*inv,'noteskewx'..col,
		-10*inv,'noteskewx'..col+1,
		30/2*inv,'skewx',
		10/2*inv,'skewx',
	}
end
xerosmile = {
	{280.000,3,1},
	{281.000,2,1},
	{281.500,1,1},
	{282.500,0,1},
	{283.500,3,1},
	{284.000,0,1},
	{284.500,1,1},
	{285.500,2,1},
	{286.500,1,4,length=0.500},
	{287.000,0,1},
	{288.000,3,4,length=0.500},
	{288.500,0,1},
	{289.500,2,1},
	{290.500,1,1},
	{291.500,2,1},
	{292.500,0,1},
	{293.250,2,1},
	{294.000,1,1},
	{294.500,3,1},
	{295.500,2,2,length=0.500},
	{296.000,3,1},
	{297.000,1,1},
	{297.500,2,1},
	{298.000,0,1},
	{298.500,3,1},
	{298.833,0,1},
	{299.250,3,1},
	{299.667,0,1},
	{300.000,3,1},
	{301.000,0,1},
	{301.500,1,1},
	{302.000,2,1},
	{302.500,3,1},
	{303.000,1,1},
	{303.500,2,1},
	{304.000,0,4,length=4.000},
	{304.500,0,4,},
	{305.000,0,4,},
	{305.500,0,4,},
	{306.000,0,4,},
	{306.500,0,4,},
	{307.000,0,4,},
	{307.500,0,4,},
}
incs=0
func{280,function()
	aft1:hidden(0)
end}
for i,v in ipairs(xerosmile) do
	func{v[1], function() fpslimit(aft1, 60) end}
	func{v[1]+0.5, function() fpslimit(aft1, 60, false) end}
	local inv1=2*(i%2)-1
	add{v[1],1,outExpo,
		45/8,'rrotz',
	}
	ease{v[1],2,flip(outQuad),
		-1000,'tinyz',
	}
	ease{v[1],1,flip(outExpo),
		-100,'rzoom',
		-300,'tiny',
		40*inv1,'skewx',
		-40*inv1,'noteskewy',
		400,'attenuatex',
		1000,'attenuatez',
		0.25,'mask',
	}
	if v[3]==2 or v[3]==4 then
		for k=0,3 do
			incs=incs+1
			local inv=2*(incs%2)-1
			ease{v[1]+k*0.333/2,1,flip(outExpo),
				-100,'tiny',
				-100*inv,'skewx',
				100*inv,'noteskewy',
			}
		end
	end
end
ease{301,3,inOutQuad,
	0,'blendalpha'
}

ease{335,1,outExpo,
	0,'digital',
 	0,'digitalz',
 }
for i=0,1 do 
	ease{335+i*0.25,1,impulse[0.5],
		-400,'tiny',
 	}
end
--break
ease{383,1,outExpo,
	0,'square',
}
add{383,2,outCirc,
	360,'rotationy',
	-rad(360),'confusionyoffset',
}
add{383,2,inOutCirc,
	360,'rotationy',
	-rad(360),'confusionyoffset',
	100,'reverse',
}
--

set{431,
	-100,'spiralholds',
	1000000,'spiralxperiod',
	1000000,'spiralzperiod',
	--1000000,'spiralyperiod',
	500000,'spiralzoffset',
	4000,'grain',
	--40,'arrowpathgrain',
}
ease{432,1.5,inQuad,
	10,'stealth',
	20,'spiralx',
	20,'spiraly',
	20,'spiralz',
	50,'reverse',
plr=2}
ease{432,1.5,inQuad,
	100,'dark',
	100,'stealth',
plr=1}
ease{432,1.5,inQuad,
	50,'stealth',
plr=2}
ease{432,1.5,inQuad,
	100,'hidden',
	100,'hidenoteflash',
	100,'zoom',
	-500,'tiny',
	50,'flip',
	0,'square',
	0,'z',
	100,'rzoom',
	0,'arrowpath',
	0,'bumpyx',
	0,'bumpyz',
	0,'attenuatex',
	100,'drawsize',
}
ease{433,7.5,inQuad,
	40,'grain',
	0.5,'mask',
	50,'spiralz',
	50,'spiralx',
	400,'zoomz',
	25,'zoom',
}
ease{440,5,outCirc,
	2,'spiralz',
	2,'spiralx',
}
--[[reset{61.5}
func{62,function()
	aquad:diffuse(1,1,1,1)
end}
set{62,
	100,'blendalpha',
	101,'rzoom',
	4,'rskewx',
	4,'rskewy',
}]]--

func{447,function()
	PP[1]:hidden(1)
	PP[2]:hidden(1)
	Pp[1]:hidden(1)
	Pp[2]:hidden(1)
end}

for i,v in ipairs(longholds2) do
	local inv=2*(i%2)-1
	local length=v[4]
	if length==nil then length=1 end
	set{v[1],1000,'bumpyzperiod',1000,'bumpyxperiod',500,'bumpyxoffset',100,'attenuatex'}
	set{v[1],-90,'squareperiod',plr=1}
	add{v[1],v[3],outQuad,
		400,'bumpyzoffset',
		400,'bumpyxoffset',
	}
	ease{v[1],v[3]*2,flip(outQuad),
		20,'square',
	plr=1}
	ease{v[1],v[3],outQuad,
		-200*inv,'bumpyz',
		100*inv,'bumpyx',
	}
end

for i,v in ipairs(extratone) do
	local inv=2*(i%2)-1
	local col=i%4
	add{v[1],0.25,outExpo,
		100,'digitaloffset',
		100,'digitalzoffset',
		5,'digital',
		-5,'digitalz',
		10,'attenuatex',
	}
	add{v[1],0.25,pop,
		0.1,'opacitydf',
	}
	ease{v[1],0.25,outExpo,
		360*(i/#extratone),'rotationy',
		-rad(360*(i/#extratone)),'confusionyoffset',
		1*(i/#extratone),'opacitydf',
	}
	add{v[1],0.0625,flip(outQuad),
		1000,'arrowpathgirth',
		100,'arrowpath',
	plr=2}
	
end

end)"
Type = "ActorFrame"
/>