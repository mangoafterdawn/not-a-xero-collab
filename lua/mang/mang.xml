<Mods LoadCommand = "%xero(function(self)
	-- your code goes here here:
-- a bunch of stuff so that i can tab to them
--[[The following eases are transient eases:

bounce tri bell pop tap spike pulse spike inverse
popElastic[damping_factor][oscillation_speed]
tapElastic[damping_factor][oscillation_speed]
pulseElastic[damping_factor][oscillation_speed]
impulse [damp]

The following eases are not transient:

instant linear
inQuad outQuad inOutQuad
inCubic outCubic inOutCubic
inQuart outQuart inOutQuart
inQuint outQuint inOutQuint
inExpo outExpo inOutExpo
inCirc outCirc inOutCirc
inElastic outElastic inOutElastic
inBack outBack inOutBack
inBounce outBounce inOutBounce
inSine outSine inOutSine]]--

local pi,pie=math.pi,math.pi*100

function rad(deg)
	return math.rad(deg) * 100
end

bam = {
	{27.500,0,1},
	{28.000,1,1},
	{28.250,1,1},
	{28.500,2,1},
	{28.750,2,1},
	{29.000,3,1},
	{29.250,0,1},
	{29.500,3,1},
	{29.750,1,1},
	{30.000,3,1},
	{31.000,0,1},
	{32.000,3,4,length=0.500},
	{32.500,2,1},
	{33.500,1,1},
	{34.500,0,4,length=0.500},
	{35.000,2,1},
	{36.000,1,1},
	{36.250,2,1},
	{36.500,1,1},
	{36.750,2,1},
	{37.000,0,1},
	{38.000,1,1},
	{39.000,0,4,length=0.500},
	{39.500,3,1},
	{40.500,2,1},
	{40.750,1,1},
	{41.000,2,1},
	{41.250,1,1},
	{41.500,0,4},
	{42.000,0,1},
	{43.000,3,1},
	{43.250,1,1},
	{43.500,3,1},
	{43.750,1,1},
	{44.000,2,1},
	{44.500,0,1},
	{45.000,3,1},
	{46.000,0,4,length=0.500},
	{46.500,1,1},
	{47.500,2,1},
	{48.500,3,4,length=0.500},
	{49.000,1,1},
	{50.000,2,1},
	{50.250,0,1},
	{50.500,2,1},
	{50.750,0,1},
	{51.000,3,1},
	{51.500,0,1},
	{52.000,1,1},
	{53.000,0,4,length=0.500},
	{53.500,3,4,length=0.500},
	{54.000,0,1},
	{54.500,1,1},
	{54.750,2,1},
	{55.000,1,1},
	{55.250,2,1},
	{55.500,3,4},
	{56.000,0,1},
	{57.000,3,4,length=0.250},
	{57.250,1,1},
	{57.500,3,1},
	{57.750,1,1},
	{58.000,2,1},
}

ebam = {
	{58,3,4,length=0.500},
	{60.000,3,4,length=0.500},
	{60.500,0,1},
	{61.000,1,1},
	{61.500,0,1},
	{62.000,3,1},
	{62.500,0,4,length=0.500},
	{63.000,3,1},
	{63.500,1,1},
	{64.000,2,2,length=0.250},
	{64.500,0,2,length=0.250},
	{65.000,3,2,length=0.250},
	{65.500,1,1},
	{66.000,3,2,length=0.250},
	{66.500,2,1},
	{67.000,1,4,length=0.500},
	{67.500,0,1},
	{68.000,2,1},
	{68.500,1,2,length=0.250},
	{69.000,2,2,length=0.250},
	{69.500,0,4,length=0.500},
	{70.000,3,2,length=0.250},
	{70.500,1,2,length=0.250},
	{71.000,2,2,length=0.250},
	{71.500,0,2,length=0.250},
	{72.000,1,2,length=0.250},
	{72.500,2,1},
	{73.000,1,2,length=0.250},
	{73.500,0,2,length=0.250},
	{74.000,3,4,length=0.500},
	{74.500,2,1},
	{75.000,1,1},
	{75.500,0,2,length=0.250},
	{76.000,2,1},
	{76.500,1,4,length=0.500},
	{77.000,2,1},
	{77.500,0,1},
	{78.000,3,4,length=0.500},
	{78.500,1,2,length=0.250},
	{79.000,2,2,length=0.250},
	{79.500,0,1},
	{80.000,1,4,length=0.500},
	{80.500,2,1},
	{81.000,1,2,length=0.250},
	{81.500,0,4,length=0.500},
	{82.000,2,1},
}

bass = {
	{84.000,0,1},
	{84.500,3,1},
	{85.000,1,1},
	{86.000,3,1},
	{86.500,2,1},
	{87.500,3,1},
	{88.000,0,1},
	{88.500,3,1},
	{89.500,0,1},
	{89.750,1,1},
	{90.000,0,1},
	{90.250,1,1},
	{90.500,0,1},
	{91.000,3,1},
	{91.500,1,1},
	{92.000,2,1},
	{93.000,0,1},
	{93.500,3,1},
	{94.500,0,1},
	{95.000,1,1},
	{95.500,0,1},
	{96.500,3,1},
	{96.750,1,1},
	{97.250,3,1},
	{97.500,1,1},
	{98.000,3,1},
	{98.500,0,1},
	{99.000,1,1},
	{100.000,2,1},
	{100.500,3,1},
	{101.500,0,1},
	{102.000,1,1},
	{102.500,0,1},
	{103.500,3,1},
	{103.750,1,1},
	{104.000,3,1},
	{104.250,1,1},
	{104.500,3,1},
	{105.000,0,1},
	{105.500,1,1},
	{106.000,2,1},
	{107.000,3,1},
	{107.500,0,1},
	{108.500,2,1},
	{109.000,1,1},
	{109.500,2,1},
	{110.000,0,4,length=1.000},
	{111.500,3,1},
	{112.000,0,1},
	{112.500,1,1},
	{113.000,0,1},
	{114.000,3,1},
	{114.500,1,1},
	{115.000,3,1},
	{115.250,0,1},
	{115.500,3,1},
	{116.000,0,1},
	{116.500,2,1},
	{117.500,1,1},
	{117.750,2,1},
	{118.000,1,1},
	{118.250,2,1},
	{118.500,1,1},
	{119.000,3,1},
	{119.500,0,1},
	{120.000,3,1},
	{121.000,0,1},
	{121.500,1,1},
	{122.500,2,1},
	{123.000,3,1},
	{123.500,2,1},
	{124.500,3,1},
	{124.750,1,1},
	{125.250,3,1},
	{125.500,1,1},
	{126.000,3,1},
	{126.500,0,1},
	{127.000,3,1},
	{128.000,0,1},
	{128.500,1,1},
	{129.000,0,1},
	{129.500,1,1},
	{130.000,2,1},
	{130.500,3,1},
	{131.500,0,1},
	{131.750,2,1},
	{132.250,0,1},
	{132.500,2,1},
	{133.000,1,1},
	{133.500,3,1},
	{134.000,1,1},
	{135.000,3,1},
	{135.500,0,1},
	{136.000,3,1},
	{136.250,2,1},
	{136.500,3,1},
	{137.000,0,1},
	{137.500,3,1},
	{138.000,1,1},
	{138.250,2,1},
	{138.500,1,2,length=1.500},
	{140.000,2,1},
	{140.500,0,1},
	{141.000,2,1},
	{142.000,0,1},
	{142.500,3,1},
	{143.000,0,1},
	{143.250,3,1},
	{143.500,0,1},
	{144.000,1,1},
	{144.500,0,1},
	{145.500,3,1},
	{145.750,1,1},
	{146.000,3,1},
	{146.500,0,1},
	{146.750,2,1},
	{147.000,0,1},
	{147.500,3,1},
	{148.000,2,1},
	{149.000,1,1},
	{149.500,0,1},
	{150.000,3,1},
	{150.250,0,1},
	{150.500,3,1},
	{151.000,1,1},
	{151.500,2,1},
	{152.000,1,1},
	{152.500,3,1},
	{152.750,0,1},
	{153.000,3,1},
	{153.250,0,1},
	{153.500,3,1},
	{154.000,2,1},
	{154.500,1,1},
	{155.000,0,1},
	{156.000,3,1},
	{156.500,1,1},
	{157.000,2,1},
	{157.250,0,1},
	{157.500,2,1},
	{158.000,0,1},
	{158.500,3,1},
	{159.500,2,1},
	{159.750,1,1},
	{160.000,2,1},
	{160.250,1,1},
	{160.500,2,1},
	{161.000,3,1},
	{161.500,0,1},
	{162.000,3,1},
	{163.000,1,1},
	{163.500,2,1},
	{164.000,0,1},
	{164.250,2,1},
	{164.500,0,1},
	{165.000,3,1},
	{165.500,2,1},
	{166.000,1,2,length=2.000},
	{168.000,0,1},
	{168.500,1,1},
	{169.000,0,1},
	{170.000,3,1},
	{170.500,1,1},
	{171.500,2,1},
	{171.750,0,1},
	{172.000,2,1},
	{172.500,0,1},
	{173.500,3,1},
	{173.750,2,1},
	{174.000,3,1},
	{174.250,2,1},
	{174.500,3,1},
	{175.000,0,1},
	{175.500,1,1},
	{176.000,0,1},
	{177.000,3,1},
	{177.500,1,1},
	{178.000,2,1},
	{178.250,0,1},
	{178.500,2,1},
	{179.000,0,1},
	{179.500,3,1},
	{180.500,2,1},
	{180.750,1,1},
	{181.250,2,1},
	{181.500,1,1},
	{182.000,0,1},
	{182.500,3,1},
	{183.000,0,1},
	{184.000,2,1},
	{184.500,0,1},
	{185.000,3,1},
	{185.250,0,1},
	{185.500,3,1},
	{186.000,0,1},
	{186.500,1,1},
	{187.500,2,1},
	{187.750,3,1},
	{188.250,2,1},
	{188.500,3,1},
	{189.000,0,1},
	{189.500,3,1},
	{190.000,0,1},
	{191.000,2,1},
	{191.500,0,1},
	{192.500,2,1},
	{192.750,1,1},
	{193.000,2,1},
	{193.500,1,1},
	{194.000,3,1},
}

GAMESTATE:ForceSmoothLines(0)
--local inv=2*(i%2)-1
--local switch=(i+1)%2
setdefault{
	0,'bumpyxoffset',
	1000,'bumpyzoffset',
plr=1}
setdefault{
	1000,'bumpyxoffset',
	0,'bumpyzoffset',
plr=2}
setdefault{
	80,'blendalphacb',
	1500,'wireframegirth',
	0.1,'rrotz',
	0.5,'rskewy',
	0.5,'rskewx',
	100,'rzoom',
	1000,'bumpyxperiod',
	1000,'bumpyzperiod',
}
definemod{'blendalphacb',function(amt)
	aftsprite1:diffusealpha(amt/100)
end}
definemod{'opacitycb',function(opct)
	exclusionshaderholder:GetShader():uniform1f('opacity',opct)
	if opct ~= 0 then
		blendsprite:SetShader(exclusionshaderholder:GetShader())
	end
end}
definemod{'opacitycd',function(opct)
	dodgeshaderholder:GetShader():uniform1f('opacity',opct)
	if opct ~= 0 then
		blendsprite:SetShader(dodgeshaderholder:GetShader())
	end
end}
definemod{'opacitydf',function(opct)
	diffshaderholder:GetShader():uniform1f('opacity',opct)
	if opct ~= 0 then
		blendsprite:SetShader(diffshaderholder:GetShader())
	end
end}
definemod{'rskewx','rskewy','rrotx','rroty','rrotz','rzoom','rposx','rposy',function(rsx,rsy,rx,ry,rz,rzm,rpx,rpy)
	aftsprite1:skewx(rsx/100)
	aftsprite1:skewy(rsy/100)
	aftsprite1:rotationx(rx)
	aftsprite1:rotationy(ry)
	aftsprite1:rotationz(rz)
	aftsprite1:zoom(rzm/100)
	aftsprite1:x(scx+rpx)
	aftsprite1:y(scy+rpy)
end}
func{27,function()
	aftsprite1:hidden(0)
end}

for i,v in ipairs(bam) do
	local inv=2*(i%2)-1
	if v[3]==4 then 
		for k=0,3 do
			ease{v[1]+k*0.1666,0.5,flip(outExpo),
				-100,'tiny',
				0,'rskewx',
				-50*inv,'rskewy',
				2,'rrotz',
			}
			if k==3 then
				add{v[1]+k*0.1666,1,impulse[2],
					100,'blendalphacb',
					0.2,'opacitycb',
				}
				ease{v[1]+k*0.1666,2,flip(outExpo),
					-200,'tiny',
					100,'zigzag',
				}
			end
		end
	else
		add{v[1],0.25,pop,
			90,'blendalphacb',
			0.8,'opacitycb',
		}
		ease{v[1],1,flip(outExpo),
			-200,'tiny',
			300,'arrowpathgirth',
		}
		ease{v[1]-0.5,1,inverse,
			20*inv,'alternate',
			100,'invert',
			100,'square',
			100,'sawtooth',
		}
		ease{v[1],1,impulse[0.5],
			-900,'tinyz',
			25,'arrowpath',
		}
	end
end
ease{27,84-27,inOutQuad,
	100,'blendalphacb',
	1,'opacitycb',
}
--xero's feature request

swap{46,0.5,outExpo,'ludr'}
swap{49,0.5,outExpo,'ldur'}

--58 to 84
for i=0,12 do
	local switch=(i+1)%2
	local inv=2*(i%2)-1
	add{58+i*2,2,inOutSine,
		0*inv,'rskewy',
		5*(i^2/26)*inv,'rskewx',
		4*inv,'rrotx',
	}
	add{58+i*2+1,2,inOutSine,
		5*(i^2/26)*inv,'rskewy',
		0*inv,'rskewx',
		-16*inv,'rrotx',
	}

	add{58+i*2,2,pop,
		500*inv,'arrowpathgirth',
	plr=1}
	add{58+i*2,2,inOutSine,
		10*inv,'bumpyx',
		-10*inv,'bumpyz',
	plr=1}
	
	add{58+i*2+1,2,pop,
		500*inv,'arrowpathgirth',
	plr=2}
	add{58+i*2,2,inOutSine,
		-10*inv,'bumpyx',
		10*inv,'bumpyz',
	plr=2}
end
ease{58,26,inOutSine,
	-120,'bumpyx',
	120,'bumpyz',

	120,'bumpyzperiod',
	120,'bumpyxperiod',

	50,'arrowpath',
plr=1}
ease{58,26,inOutSine,
	120,'bumpyx',
	-120,'bumpyz',

	120,'bumpyzperiod',
	120,'bumpyxperiod',

	50,'arrowpath',
plr=2}
ease{82,2,inOutQuad,
	0,'bumpyx',
	0,'bumpyz',
}

ease{84,2,inOutSine,
	get('rskewx')/8,'rskewx',
	get('rskewy')/8,'rskewy'
}
for i,v in ipairs(ebam) do
	local inv=2*(i%2)-1
	if v[3]==4 then
		for k=0,3 do
			ease{v[1]+k*0.1666,0.5,flip(outExpo),
				-100,'tiny',
				0,'rskewx',
				-20*inv,'rskewy',
				2,'rrotz',
				50,'invert',
				20*inv,'alternate',
			}
		end
	elseif v[3]==2 then
		ease{v[1],1,flip(outExpo),
			-100,'tiny',
			-20*inv,'alternate',
		}
		for k=0,3 do
			ease{v[1]+k*0.166/2,0.166/2,flip(outExpo),
				50,'stealth',
				300*inv,'noteskewx',
			plr=2}
		end
		swap{v[1],0.166/2,outExpo,'ldur',plr=2}
		swap{v[1]+0.166/2,0.166/2,outExpo,'rldu',plr=2}
		swap{v[1]+(0.166/2*2),0.166/2,outExpo,'urld',plr=2}
		swap{v[1]+(0.166/2*3),0.166/2,outExpo,'ldur',plr=2}
	end
end

for i,v in ipairs(bass) do
	local pn=(i+1)%2+1
	local switch=(i+1)%2
	local switch2=(i)%2
	local inv=2*(i%2)-1
	ease{v[1],0.5,flip(outExpo),
		2,'mask'
	}
	ease{v[1]-0.1,0.5,flip(outExpo),
		-200,'tiny',
		-50,'flip',
	}
	if i%2==0 then 
		ease{v[1]+0.25,1,outQuad,
			0,'tinyz',
			50,'roll',
			50,'twirl',
			100,'wireframe',
		plr=1}
		set{v[1]+0.25,
			0,'tinyz',
			0,'roll',
			0,'twirl',
			0,'wireframe',
		plr=2}
	else
		ease{v[1]+0.25,1,outQuad,
			0,'tinyz',
			50,'roll',
			50,'twirl',
			100,'wireframe',
		plr=2}
		set{v[1]+0.25,
			0,'tinyz',
			0,'roll',
			0,'twirl',
			0,'wireframe',
		plr=1}
	end


	ease{v[1],1,impulse[2],
		10*inv,'noteskewy',
		-10*inv,'skewy',
		-10*inv,'alternate',
		8*inv,'split',
	}
	ease{v[1],0.5,pop,
		10*inv,'rposx',
	}
	add{v[1],0.5,flip(outExpo),
		-30,'rskewx',
		30,'rskewy',
	}
	ease{v[1]-0.1,1.75,popElastic[2][4],
		-100,'tinyx',
		1000,'arrowpathgirth',
	}
	ease{v[1]-0.1,0.5,flip(outExpo),
		200*inv,'tanbumpy',
		5*inv,'rotationz',
		-40*inv,'noteskewx',
		-100,'tinyy',
	}
	if v[1]>=140 then 
		ease{v[1],0.5,outExpo,
			100*switch,'flip',
		}
	else

	end

end
for i=0,12 do
	ease{84+i*8,4,inOutSine,
		45/4,'rotationz',
	}
	ease{84+i*8+4,4,inOutSine,
		-45/4,'rotationz',
	}
	if i%3==0 then
		ease{84+i*8,12,inOutSine,
			45/1.5,'rotationx',
			-45/1.2,'rotationy',
		}
	else
		ease{84+i*8+6,12,inOutSine,
			-45/1.5,'rotationx',
			45/1.2,'rotationy',
		}
	end
end

ease{138.5,1.25,inExpo,
	100,'flip'
}
ease{138.5,2,inOutCirc,
	0,'rskewx',
	5,'rposy',
	25/2,'rroty',
}

ease{84-0.5,1,inOutCirc,
	0,'opacitycb',
	1,'opacitycd',
}
func{138.5,function()
	plus:diffusealpha(0)
end}
func{140,1,inQuad,function()
	plus:diffusealpha(0.25)
	plus:rotationx(20)
	plus:rotationy(-50)
end}
definemod{'plusrx','plusry','plusrz',function(rx,ry,rz)
	plus:rotationx(rx)
	plus:rotationy(ry)
	plus:rotationz(rz)
end}
add{140,196-140,inQuad,
	360*5,'plusrz',
}

func{84,function()
	plus:hidden(1)
	exclusionshaderholder:GetShader():uniformTexture('sampler1', overlay2:GetTexture())
	aquad:diffuse(0.0,0.0,0.0,1)
end}

reset{194.5,1.5,inExpo}

mincr0=0
mincr1=0
mincr2=0
set{336,
	700,'attenuatex',
	100,'zoom',
	6000,'arrowpathdrawsize',
	6000,'arrowpathdrawsizeback',
	101,'rzoom',
	0,'rskewy',
	0,'rskewx',
	0,'rrotx',
	0,'rrotz',
	0,'rposx',
	100,'blendalphacb',
	75,'drawsize',
	75,'drawsizeback',
	0,'stripeszoomy',
}
set{336,
	150,'zoom',
	50,'arrowpath',
	100,'stealth',
	100,'dark',
	100,'flip',
plr=2}
func{336,function()
	stripes:hidden(0)
	stripes:customtexturerect(0,0,12,12)
	stripes:texcoordvelocity(1,1)
	stripes:rotationz(90)
	overlay:hidden(0)
	overlay:blend('add')
	overlay:diffusealpha(1)
	overlay:zoomto(sw,sw)
	overlay:xy(scx,scy)
	overlay4:hidden(0)
	overlay4:blend('subtract')
	overlay4:diffusealpha(0.2)
	overlay4:zoomto(sw*1.5,sw*1.5)
	overlay4:xy(scx,scy)
	aftsprite1:SetTextureFiltering(false)
	aquad:diffuse(0,0,0,1)
end}
definemod{'stripeszoomy',function(y)
	stripes:zoomy(y/100)
end}
definemod{'overlayrz',function(z)
	overlay4:rotationz(z)
end}
for i=0,128+64 do 
	if (i<=93 or i>=98) then
		local switch=(i+1)%2
		local inv=2*(i%2)-1
		ease{336+i*0.5,0.5,outExpo,
			0.5*switch,'opacitydf',
			100*inv,'square',
		plr=2}
		add{336+i*0.5,2,flip(outQuad),
			scy,'stripeszoomy',
			-50,'stealth',
		plr=2}
		add{336+i*0.5,1,outExpo,
			-90/8,'overlayrz',
			100,'squareoffset',
		}
		ease{336+i*0.5,0.5,flip(inCirc),
			50,'zoomx',
		plr=2}
		ease{336+i*0.5,1,popElastic[2][3],
			-400,'tinyx',
		}
		ease{336+i*0.5,1.25,popElastic[2][4],
			1000,'arrowpathgirth',
			-400,'tinyy',
		}
		ease{336+i*0.5,0.5,flip(inCirc),
			10*inv,'alternate',
		}
		ease{336+i*4,8,inOutSine,
			90*inv,'rotationz',
		}
		ease{336+i*4+4,8,inOutSine,
			-90*inv,'rotationz',
		}
		if i%4==0 then
		elseif i%4==1 then
		
		elseif i%4==2 then
		mincr1=mincr1+1
		local inv=2*(mincr1%2)-1
		ease{336+i*4,8,inOutSine,
			50*inv,'rotationx',
			-rad(50*inv),'confusionxoffset',
		}
		ease{336+i*4+4,8,inOutSine,
			-50*inv,'rotationx',
			rad(50*inv),'confusionxoffset',
		}
		end
	end
end

end)"
Type = "ActorFrame"
/>